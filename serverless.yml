service: cruderia-api
app: cruderia-api

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221

  stage: dev
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - !GetAtt usersTable.Arn
        - !GetAtt ordersTable.Arn
        - !GetAtt productsTable.Arn

  environment:
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    PRODUCTS_TABLE_NAME: ${self:custom.productsTableName}
    ORDERS_TABLE_NAME: ${self:custom.ordersTableName}
    TOKEN_KEY: TWF1cmljaW8gU2FoYWd1biBNYXJ0aW4gZGVsIENhbXBv


custom:
  usersTableName: users-table-${self:provider.stage}
  productsTableName: products-table-${self:provider.stage}
  ordersTableName: orders-table-${self:provider.stage}
  # documentation:
  #   version: '1'
  #   title: 'Cruderia API'
  #   description: 'This is my Cruderia API'
  #   models: {}
  cors:
    origin: '*'
    headers:
      - Access-Control-Allow-Headers
      - Access-Control-Allow-Origin
      - Authorization
      - Content-Type
      - X-Amz-Date
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - X-Customer-Id
      - X-NMG-Group
    allowCredentials: true
  
functions:
  hello:
    handler: src/userHandler.hello
    events:
      - http:
          path: /cruderia-api/helloworld
          method: GET
          cors: true
          # documentation: ${file(serverless.doc.yml):endpoints.hello}


  register:
    handler: src/userHandler.register
    events:
      - http:
          path: /cruderia-api/register
          method: POST
          cors: true

  login:
    handler: src/userHandler.login
    events:
      - http:
          path: /cruderia-api/login
          method: POST
          cors: true

  logout:
    handler: src/userHandler.logout
    events:
      - http:
          path: /cruderia-api/logout
          method: POST
          cors: true

  createProduct:
    handler: src/productHandler.createProduct
    events:
      - http:
          path: /cruderia-api/products
          method: POST
          cors: true

  getProducts:
    handler: src/productHandler.getProducts
    events:
      - http:
          path: /cruderia-api/products
          method: GET
          cors: true

  getProduct:
    handler: src/productHandler.getProduct
    events:
      - http:
          path: /cruderia-api/products/{productId}
          method: GET
          cors: true

  deleteProduct:
    handler: src/productHandler.deleteProduct
    events:
      - http:
          path: /cruderia-api/products/{productId}
          method: DELETE
          cors: true

resources: # CloudFormation template syntax
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.productsTableName}
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ordersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.ordersTableName}
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
